require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe LikesController, type: :controller do
  include AuthorizationHelpers
  let(:user) { User.create!(handle: "Kay", password_hash: "gewagewagewa") }
  let(:other_user) { User.create!(handle: "Matt", password_hash: "xcvxcvxv") }
  let(:peep) { other_user.peeps.create!(body: "Hello!") }

  # This should return the minimal set of attributes required to create a valid
  # Like. As you add validations to Like, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { user_id: user.id, peep_id: peep.id }
  }

  let(:unauthorized_user_attributes) {
    { user_id: other_user.id, peep_id: peep.id }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # LikesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "PUT/PATCH #update" do
    context "with valid params" do
      it "creates a new Like" do
        authorize!
        expect {
          put :update, params: valid_attributes, session: valid_session
        }.to change(Like, :count).by(1)
      end

      it "renders a JSON response with the new like" do
        authorize!
        put :update, params: valid_attributes, session: valid_session
        expect(response).to have_http_status(:created)
        expect(response.content_type).to eq('application/json')
        like = Like.last
        expect(response.location).to eq(peep_like_url(like.peep, like))
      end
    end

    context "with unauthorized user params" do
      it "renders a JSON response with errors for the new like" do
        authorize!
        put :update, params: unauthorized_user_attributes, session: valid_session
        expect(response).to have_http_status(:unauthorized)
      end
    end

    context "with bad token" do
      it "renders a JSON response with errors for the new like" do
        authorize_badly!
        put :update, params: valid_attributes, session: valid_session
        expect(response).to have_http_status(:unauthorized)
      end
    end

    context "when liking twice" do
      it "renders a JSON response with errors for the duplicate user" do
        authorize!
        put :update, params: valid_attributes, session: valid_session
        put :update, params: valid_attributes, session: valid_session
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json')
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested like" do
      authorize!
      like = Like.create! valid_attributes
      expect {
        delete :destroy, params: valid_attributes, session: valid_session
      }.to change(Like, :count).by(-1)
    end

    context "with unauthorized user params" do
      it "renders a JSON response with errors for the new like" do
        authorize!
        like = Like.create! unauthorized_user_attributes
        expect {
          delete :destroy, params: unauthorized_user_attributes, session: valid_session
        }.not_to change(Like, :count)
      end
    end

    context "with bad token" do
      it "renders a JSON response with errors for the new like" do
        authorize_badly!
        like = Like.create! valid_attributes
        expect {
          delete :destroy, params: valid_attributes, session: valid_session
        }.not_to change(Like, :count)
      end
    end
  end

end
