require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe PeepsController, type: :controller do
  include AuthorizationHelpers
  let(:user) { User.create!(handle: "Kay", password_hash: "gewagewagewa") }
  let(:other_user) { User.create!(handle: "Dog", password_hash: "feafewafea") }

  # This should return the minimal set of attributes required to create a valid
  # Peep. As you add validations to Peep, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { user_id: user.id, body: "Hello!" }
  }

  let(:invalid_attributes) {
    { user_id: user.id, body: nil }
  }

  let(:unauthorized_user_attributes) {
    { user_id: other_user.id, body: "world" }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PeepsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "returns a JSON list of the peeps in reverse chronological order" do
      peep = Peep.create! valid_attributes
      peep_2 = Peep.create! valid_attributes.merge(body: "Hello 2")
      get :index, params: {}, session: valid_session
      expect(response).to be_successful
      expect(JSON.parse(response.body)).to eq([
        {
          "id" => peep_2.id,
          "body" => peep_2.body,
          "created_at" => peep_2.created_at.as_json,
          "updated_at" => peep_2.updated_at.as_json,
          "user" => {
            "id" => peep_2.user.id,
            "handle" => peep_2.user.handle
          },
          "likes" => []
        },
        {
          "id" => peep.id,
          "body" => peep.body,
          "created_at" => peep.created_at.as_json,
          "updated_at" => peep.updated_at.as_json,
          "user" => {
            "id" => peep.user.id,
            "handle" => peep.user.handle
          },
          "likes" => []
        }
      ])
    end
  end

  describe "GET #show" do
    it "returns JSON of the peep" do
      peep = Peep.create! valid_attributes
      peep.likes.create!(user: other_user)
      get :show, params: {id: peep.to_param}, session: valid_session
      expect(response).to be_successful
      expect(JSON.parse(response.body)).to eq({
        "id" => peep.id,
        "body" => peep.body,
        "created_at" => peep.created_at.as_json,
        "updated_at" => peep.updated_at.as_json,
        "user" => {
          "id" => peep.user.id,
          "handle" => peep.user.handle
        },
        "likes" => [
          {
            "user" => {
              "id" => other_user.id,
              "handle" => "Dog"
            }
          }
        ]
      })
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Peep" do
        authorize!
        expect {
          post :create, params: {peep: valid_attributes}, session: valid_session
        }.to change(Peep, :count).by(1)
      end

      it "renders a JSON response with the new peep" do
        authorize!
        post :create, params: {peep: valid_attributes}, session: valid_session
        expect(response).to have_http_status(:created)
        expect(response.content_type).to eq('application/json')
        expect(response.location).to eq(peep_url(Peep.last))
      end
    end

    context "with invalid params" do
      it "renders a JSON response with errors for the new peep" do
        authorize!
        post :create, params: {peep: invalid_attributes}, session: valid_session
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json')
      end
    end

    context "with unauthorised user params" do
      it "responds unauthorized" do
        authorize_badly!
        post :create, params: {peep: unauthorized_user_attributes}, session: valid_session
        expect(response).to have_http_status(:unauthorized)
      end

      it "does not create the peep" do
        authorize!
        expect {
          post :create, params: {peep: unauthorized_user_attributes}, session: valid_session
        }.not_to change(Peep, :count)
      end
    end

    context "with invalid token" do
      it "forbids access" do
        authorize_badly!
        post :create, params: {peep: valid_attributes}, session: valid_session
        expect(response).to have_http_status(:unauthorized)
      end
    end
  end

  describe "PUT #update" do
    let(:new_attributes) {
      { body: "Woop!" }
    }

    context "with valid params" do
      it "updates the requested peep" do
        authorize!
        peep = Peep.create! valid_attributes

        put :update, params: {id: peep.to_param, peep: new_attributes}, session: valid_session
        peep.reload
        expect(peep.body).to eq new_attributes[:body]
      end

      it "renders a JSON response with the peep" do
        authorize!
        peep = Peep.create! valid_attributes

        put :update, params: {id: peep.to_param, peep: valid_attributes}, session: valid_session
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to eq('application/json')
      end
    end

    context "with invalid params" do
      it "renders a JSON response with errors for the peep" do
        authorize!
        peep = Peep.create! valid_attributes

        put :update, params: {id: peep.to_param, peep: invalid_attributes}, session: valid_session
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json')
      end
    end

    context "with unauthorised user params" do
      it "responds unauthorized" do
        authorize!
        peep = Peep.create! unauthorized_user_attributes

        put :update, params: {id: peep.to_param, peep: new_attributes}, session: valid_session
        expect(response).to have_http_status(:unauthorized)
      end

      it "does not update the peep" do
        authorize!
        peep = Peep.create! unauthorized_user_attributes

        put :update, params: {id: peep.to_param, peep: new_attributes}, session: valid_session
        peep.reload
        expect(peep.body).to eq unauthorized_user_attributes[:body]
      end
    end

    context "with invalid token" do
      it "responds unauthorized" do
        authorize_badly!
        peep = Peep.create! valid_attributes

        put :update, params: {id: peep.to_param, peep: new_attributes}, session: valid_session
        expect(response).to have_http_status(:unauthorized)
      end

      it "does not update the peep" do
        authorize_badly!
        peep = Peep.create! valid_attributes

        put :update, params: {id: peep.to_param, peep: new_attributes}, session: valid_session
        peep.reload
        expect(peep.body).to eq valid_attributes[:body]
      end
    end
  end

  describe "DELETE #destroy" do
    context "with valid params" do
      it "destroys the requested peep" do
        authorize!
        peep = Peep.create! valid_attributes
        expect {
          delete :destroy, params: {id: peep.to_param}, session: valid_session
        }.to change(Peep, :count).by(-1)
      end
    end

    context "with unauthorised user params" do
      it "does not destroy the requested peep" do
        authorize!
        peep = Peep.create! unauthorized_user_attributes
        expect {
          delete :destroy, params: {id: peep.to_param}, session: valid_session
        }.not_to change(Peep, :count)
      end
    end

    context "with invalid token" do
      it "destroys the requested peep" do
        authorize_badly!
        peep = Peep.create! valid_attributes
        expect {
          delete :destroy, params: {id: peep.to_param}, session: valid_session
        }.not_to change(Peep, :count)
      end
    end
  end

end
